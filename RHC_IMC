/*
 * in the mod main class
 */
  @EventHandler
  public void Init(FMLInitializationEvent event) {
      //possibly placed as a last call
      if(Loader.isModLoaded("rockhounding_chemistry")){
          ModExtra.addOvenExtra();
          ModExtra.addSizerExtra();
          ModExtra.addSeasonerExtra();
          ModExtra.addAlloyerExtra();
      }
  }

  public class ModExtra {
/*
 * Adding recipes to the Lab Oven
 */
      public static void addOvenExtra() {
      /*
       * Args: solute, solvent1, solvent2, output fluid
       * Solvent 2 must be null if not used, Solvent 1 must be always used
       */
          sendToOven(new ItemStack(Items.IRON_INGOT), new FluidStack(FluidRegistry.getFluid("sulfuric_acid"), 500), new FluidStack(FluidRegistry.WATER, 500), new FluidStack(FluidRegistry.LAVA, 500));
          sendToOven(new ItemStack(Items.SLIME_BALL), new FluidStack(FluidRegistry.getFluid("sulfuric_acid"), 500), null, new FluidStack(FluidRegistry.getFluid("silicone"), 500));
          sendToOven(new ItemStack(Items.ROTTEN_FLESH), new FluidStack(ModFluids.BLOOM, 500), null, new FluidStack(FluidRegistry.WATER, 500));
      }

	private static void sendToOven(ItemStack soluteStack, FluidStack fluid1, FluidStack fluid2, FluidStack outputFluid) {
		NBTTagCompound solute = new NBTTagCompound(); 
		NBTTagCompound solvent1 = new NBTTagCompound();
		NBTTagCompound solvent2 = new NBTTagCompound();
		NBTTagCompound solution = new NBTTagCompound();
		NBTTagCompound recipe = new NBTTagCompound();
		//write solute
		soluteStack.writeToNBT(solute);
		recipe.setTag("Solute", solute);
		//write solvent1
		fluid1.writeToNBT(solvent1);
		recipe.setTag("Solvent1", solvent1);
		//write solvenr2 only if used
		if(fluid2 != null){
			fluid2.writeToNBT(solvent2);
			recipe.setTag("Solvent2", solvent2);
		}
		//wride output fluid
		outputFluid.writeToNBT(solution);
		recipe.setTag("Solution", solution);
		//send the recipe
		FMLInterModComms.sendMessage("rockhounding_chemistry", "addToLabOven", recipe);
	}

/*
 * Adding recipes to the Mineral Sizer
 */
	public static void addSizerExtra() {
		/*
		 * Args: input, output
		 */
		sendToSizer(new ItemStack(Blocks.GRAVEL), new ItemStack(Items.FLINT));
		sendToSizer(new ItemStack(Blocks.CLAY), new ItemStack(Items.CLAY_BALL));
		sendToSizer(new ItemStack(Blocks.STONE,1,5), new ItemStack(Items.BLAZE_POWDER, 2));
		sendToSizer(new ItemStack(Blocks.STONE,1,3), new ItemStack(Items.GUNPOWDER, 4));
	}

	private static void sendToSizer(ItemStack inputStack, ItemStack outputStack) {
		NBTTagCompound input = new NBTTagCompound(); 
		NBTTagCompound output = new NBTTagCompound();		
		NBTTagCompound recipe = new NBTTagCompound();
		//write input
		inputStack.writeToNBT(input);
		recipe.setTag("Input", input);
		//write output
		outputStack.writeToNBT(output);
		recipe.setTag("Output", output);
		//send the recipe
		FMLInterModComms.sendMessage("rockhounding_chemistry", "addToMineralSizer", recipe);
	}

/*
 * Adding recipes to the Seasoning Rack
 */
	public static void addSeasonerExtra() {
		/*
		 * Args: input, output
		 */
		sendToSeasoner(new ItemStack(Items.ROTTEN_FLESH), new ItemStack(Items.LEATHER));
		sendToSeasoner(new ItemStack(Items.CLAY_BALL), new ItemStack(Items.BRICK));
	}

	private static void sendToSeasoner(ItemStack inputStack, ItemStack outputStack) {
		NBTTagCompound input = new NBTTagCompound(); 
		NBTTagCompound output = new NBTTagCompound();		
		NBTTagCompound recipe = new NBTTagCompound();
		//write input
		inputStack.writeToNBT(input);
		recipe.setTag("Input", input);
		//write output
		outputStack.writeToNBT(output);
		recipe.setTag("Output", output);
		//send the recipe
		FMLInterModComms.sendMessage("rockhounding_chemistry", "addToSeasoner", recipe);
	}

	/*
	 Adding recipes to the Metal Alloyer 
	 */
	public static void alloyerExtra() {
		/*
		 * Aegs: Display Name, list of oredicted dusts, list of quantity for each dust, Ingot, Waste
		 * Waste can be null (usually returns bonus nuggets of the same alloy)
		 */
		sendToAlloyer("Brass", 	Arrays.asList("dustCopper", "dustZinc", "dustIridium"), Arrays.asList(5,3,1), new ItemStack(ModItems.miscItems,1,25), new ItemStack(ModItems.miscItems,1,26));
		sendToAlloyer("Invar", Arrays.asList("dustIron", "dustNickel"), Arrays.asList(6,3), new ItemStack(ModItems.miscItems,1,27), new ItemStack(ModItems.miscItems,1,28));
	}

	private static void sendToAlloyer(String displayName, List<String> dusts, List<Integer> quantities, ItemStack ingotStack, ItemStack scrapStack) {
		NBTTagCompound recipe = new NBTTagCompound();
		NBTTagCompound ingot = new NBTTagCompound();
		NBTTagCompound scrap = new NBTTagCompound();
		NBTTagList dustList = new NBTTagList();
		NBTTagList quantityList = new NBTTagList();
		//write display name
		recipe.setString("Display", displayName);
		//write dusts array
		for(int i = 0; i < dusts.size(); i++){
			if(dusts.get(i) != ""){
				NBTTagCompound tagDust = new NBTTagCompound();
				tagDust.setString("Dust" + i, dusts.get(i));
				dustList.appendTag(tagDust);
			}
		}
		recipe.setTag("Dusts", dustList);
		//write quantity array
		for(int i = 0; i < quantities.size(); i++){
			if(quantities.get(i) > 0){
				NBTTagCompound tagQuantity = new NBTTagCompound();
				tagQuantity.setInteger("Quantity" + i, quantities.get(i));
				quantityList.appendTag(tagQuantity);
			}
		}
		recipe.setTag("Quantities", quantityList);
		//write ingot
		ingotStack.writeToNBT(ingot);
		recipe.setTag("Ingot", ingot);
		//write waste
		if(scrapStack != null){
			scrapStack.writeToNBT(scrap);
			recipe.setTag("Scrap", scrap);
		}
		//send the recipe
		FMLInterModComms.sendMessage("rockhounding_chemistry", "addToAlloyer", recipe);
	}
}
